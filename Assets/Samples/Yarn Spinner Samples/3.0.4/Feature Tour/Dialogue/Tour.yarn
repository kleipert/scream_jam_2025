title: Capsley_Welcome
position: -825,-253
group: Capsley
---
<<declare $NPC_Variables_Name = "Ogbert">>
<<declare $player_gold = 10>>
<<declare $player_spoke_to_sally = false>>
<<enum Meal>>
  <<case None>>
  <<case Ramen>>
  <<case Pizza>>
  <<case MeatProduct>>
  <<case Sludge>>
<<endenum>>
<<declare $player_meal = Meal.None>>
<<declare $player_can_afford_bribe = $player_gold >= 6>>

Capsley: Hi! Welcome to Yarn Spinner!
Capsley: This is the Feature Tour!
Capsley: Walk through these rooms to learn about the major features of Yarn Spinner.
Capsley: You can find me in each one.
Capsley: I'll tell you what you're seeing in the room.
Capsley: Or you can just be confused..
Capsley: And wander alone.
Capsley: Just like the real world.
Capsley: Anyway...
Capsley: Have a lovely day!
===
title: Capsley_Room2
position: -615,-253
group: Capsley
---
Capsley: Hello again.
Capsley: The pillbois in this room shows off the main elements of writing dialogue in Yarn Spinner.
Capsley: Lines, options, nodes, and jumps.
Capsley: see you soon.
Capsley: really soon.
===
title: Capsley_Room3
position: -825,-122
group: Capsley
---
Capsley: Well, well, well, if it isn't you.
Capsley: This room shows off detours!
Capsley: Which are similar to jumps...
Capsley: And are another way to structure your game!
===
title: Capsley_Room4
position: -615,-122
group: Capsley
---
Capsley: Fancy seeing you here!
Capsley: This room shows off using variables in Yarn!
Capsley: And also shows off enumerations, or enums!
Capsley: Which are another type of variable!
===
title: Capsley_Room5
position: -825,11
group: Capsley
---
Capsley: Oh, you're still here?
Capsley: Well then! I guess you want to see how to do conditionals and branching in Yarn.
Capsley: Which is what this room is all about, using ifs, onces, and options to do branching!
===
title: Capsley_Room6
position: -615,11
group: Capsley
---
Capsley: You've almost reached the end.
Capsley: Here, we're showing off commands, functions, and smart variables.
Capsley: All of these are more advanced elements of Yarn Spinner to give you more control and hooks!
Capsley: Hooks both into Yarn, and hooks into the other parts of your game!
===
title: Capsley_Room7
position: -825,143
group: Capsley
---
Capsley: The final room, or is it?
Capsley: Nah, it is.
Capsley: This room demonstrates storylets, which are a new way of organising story content.
Capsley: Here, we show off two variants of storylets: line groups, and node groups.
===

title: Room2_Nodes_and_Lines
group: Room2
position: -305,-245
---
Bob: Hello. I'm Bob.
Bob: I'm talking to you from my very own node.
Bob: Each each of these lines...
Bob: ... is a line!
Bob: Yarn Spinner scripts are made up of Nodes and Lines.
Bob: Neat, huh?
===

title: Room2_Options_and_Jumps_1
group: Room2
position: -42,-248
---
Bill: Hello. I'm Bill.
    -> Hi, I'm The Player.
    -> Hello, Bill.
Bill: See those choices you just had? 
Bill: Those are called Options.
Bill: They let you create lines in your nodes that offer players, like you, a choice.
    -> That's pretty neat!
        Bill: It is neat!
        <<jump Room2_Options_and_Jumps_2>>
    -> OK...
        <<jump Room2_Options_and_Jumps_3>>
===

title: Room2_Options_and_Jumps_2
group: Room2
position: -247,-26
---
Bill: It's easy to move between nodes with Jump Commands.
Bill: So easy, in fact, that we just did it without you even noticing.
Bill: It's very neat!
===
title: Room2_Options_and_Jumps_3
group: Room2
position: 273,-142
---
Bill: You could be more enthusiastic.
Bill: Either way, we're in another node now.
Bill: We got here with a Jump Command.
Bill: Jump Commands let you move the dialogue between nodes.
===

title: Room3_Detours_1
group: Room3
position: -299,292
---
Bruce: I'm Bruce. My single purpose in life...
Bruce: My raison d'être...
Bruce: My whole reason to get up in the morning...
Bruce: .. is to tell you about detours.
<<detour Room3_Detours_2>>
Bruce: You'll end up back in the original node.
Bruce: Like you are right now. SURPRISE!
Bruce: Detours. Amazing. 
Bruce: They work like Jump Commands, but bring you back at the end.
Bruce: I don't actually get up in the morning, by the way.
Bruce: I'm always here. 
===

title: Room3_Detours_2
group: Room3
position: -244,538
---
Bruce: This is a detour. Right now. We just detoured to a whole different node.
Bruce: Amazing, right?
Bruce: And when we're done here...
===

title: Room4_Variables_1
group: Room4
position: 168,589
---
{$NPC_Variables_Name}: Hi. I'm {$NPC_Variables_Name}. Or I can be someone else if you prefer?
    -> You're Arnold.
        <<set $NPC_Variables_Name = "Arnold">>
    -> Hmm.. You're Terrence.
        <<set $NPC_Variables_Name = "Terrence">>
    -> Studly. 
        <<set $NPC_Variables_Name = "Studley">>
{$NPC_Variables_Name}: Easy done!
{$NPC_Variables_Name}: That happened because of a Variable.
{$NPC_Variables_Name}: My whole name is just a Variable. And it's set when you tell me who I am.
{$NPC_Variables_Name}: You can update them or check them any time.
{$NPC_Variables_Name}: Or use them in lines, like this...
{$NPC_Variables_Name}: My name is {$NPC_Variables_Name}, and will always be {$NPC_Variables_Name}, until you change it.
{$NPC_Variables_Name}: How cool is that?
===

title: Room4_Variables_2
group: Room4
position: 153,407
---
Sally: Did you speak to {$NPC_Variables_Name}?
Sally: They left out the best bit of Variables!
Sally: They don't have to be strings of text.
Sally: They can also be numbers.
Sally: For example, you have {$player_gold} pieces of gold.
Sally: I know that because there's a Variable that tracks it.
Sally: I'm also setting a variable that indicates you've spoken to me.
<<set $player_spoke_to_sally = true>>
Sally: Bye now!
===

title: Room5_IfStatements_1
group: Room5
position: 646,107
---
<<if $player_spoke_to_sally>>
    Mary: I know you spoke to Sally about Variables.
    Mary: I know because we're inside an if-statement that checks if that variable is true.
    Mary: AND IT IS TRUE! I KNOW!
    Mary: Also I was watching you.
<<else>>
    Mary: You should try speaking to Sally in the previous room.
    Mary: I say this to everyone who hasn't spoken to her...
    Mary: Because.. well.. these lines are inside the if and else statements.
    Mary: And you'll only see them if the condition on the if statement is not true.
    Mary: What's the condition, you ask?
    Mary: I'm not saying. Just go speak to Sally in the previous room.
    Mary: Then come back to me. And maybe you'll figure it out.
<<endif>>
===

title: Room5_ConditionalOptions_1
group: Room5
position: 662,262
---
Thor: Hi. 
    -> Hi, Thor.
        Thor: Hi.
    -> Hi, Thor. Do you know Sally? <<if $player_spoke_to_sally>>
        Thor: Oh, yeah. I do.
        Thor: And you could only ask me that because that was a Conditional Option.
        Thor: A Conditional Option is like a regular Option... but it has a little if-statement attached to the end of its line.
        Thor: And that little if-statement... if it evaluates to true... then you get to see the option, and potentially choose it.
Thor: Toodles! Have a nice day.
===

title: Room5_Enums_1
group: Room5
position: 668,438
---
Ruby: Would you like a meal? Ramen, Pizza, Nutritional Sludge(tm), or Meat Product?
    -> Sure, Ramen please.
        <<set $player_meal = .Ramen>>
    -> Pizza.
        <<set $player_meal = .Pizza>>    
    -> Nutritional Sludge(tm) is my favourite! That one.
        <<set $player_meal = .Sludge>>
    -> ... Meat Product, I guess.
        <<set $player_meal = .Sludge>>   
Ruby: Neat! I just set an Enum to the meal you chose.
Ruby: Enums are a special kind of variables, whose value is constrained to a predefined list of things.
Ruby: Can you guess what the list of things might be?
Ruby: That's right! It's the different meals I have for you! Or no meal.
<<if $player_meal == .Ramen>>
    Ruby: Anyway... You got Ramen.
    Ruby: That one is my favourite.
    Ruby: And I'm telling you that because I used an if-statement to check which value of the Meal Enum is stored in the variable I'm using to track the player's meal.
    Ruby: Works well, right?
<<endif>>
Ruby: Bye bye!
===

title: Room5_Once_1
group: Room5
position: 647,611
---
<<once>>
    Norb: Hi, I'm Norb.
    Norb: I'm only ever going to talk to you ONCE!
    Norb: Once and no more. 
    Norb: Next time you speak to me I won't greet you.
    Norb: That's because my greeting lines are inside a Once Statement.
    Norb: Which.. well you can guess what it does.
    Norb: Once statements can also be added to options, which means they can only be chosen once.
    Norb: You can even put conditions on Once statements.
<<endonce>>
===

title: Room6_Commands_1
group: Room6
position: 99,903
---
Derek: YOU!
    -> Me?
Derek: Yes, you!
<<wait 2>>
Derek: That was a dramatic pause, right?
Derek: I did that with a Command! The Wait Command!
Derek: You can make your own Commands to let Yarn Spinner Scripts control Unity Scripts.
Derek: So you can use them to make things happen in the game world, from Yarn Spinner.
Derek: The Wait Command comes with Yarn Spinner though.
Derek: Think of Commands like stage directions.
Derek: Anyway, bye!
===

title: Room6_Functions_1
group: Room6
position: 343,902
---
Beryl: Psst...
    -> Yes?
Beryl: Wanna learn about Functions?
    -> ... sure.
Beryl: Functions are things that provide a value to your Yarn Spinner Scripts.
Beryl: For example... I can roll a dice, because Yarn Spinner provides a dice Function.
<<if dice(6) == 6>>
    Beryl: I rolled a six!
<<else>>
    Beryl: Well, I didn't roll a six. Alas.
<<endif>>
Beryl: My favourite number, right at this moment, is {random_range(1,10)}!
Beryl: But next time you ask me, it might be different. That's because I used the random_range function to get my favourite number.
Beryl: I'm fickle as heck.
Beryl: Anyway, Yarn Spinner has lots of built-in Functions.
Beryl: But you can also make your own, to get information out of Unity Scripts.
Beryl: Anyway, bye.
===

title: Room6_SmartVariables_1
group: Room6
position: -147,906
---
Reginald: Did you know that Variables can also be Smart?
Reginald: When they're Smart, we call them Smart Variables.
Reginald: We're proud of our evocative naming choices.
<<if $player_can_afford_bribe>>
    Reginald: Anyway.
    Reginald: I know you can afford to bribe me because you have enough gold.
    <<set $player_gold = $player_gold - 6>>
    Reginald: And I know this because there's a Smart Variable that is set to true if the variable that tracks how much gold you have is greater than or equal to a certain value.
    Reginald: Smart Variables let you simplify if-statements, and clarify depdendencies between your variables.
<<else>>
    Reginald: Thanks to a Smart Variable, I know you cannot afford to bribe me. Alas.
<<endif>>
Reginald: Farewell!
===

title: Room7_LineGroups_1
group: Room7
position: 947,-227
---
=> Sven: HI FRIEND!
=> Sven: Hi there! I'm Sven.
=> Sven: Welcome! I'm so excited!
Sven: You'll get a different greeting from me depending on which one of my Line Group lines is selected.
Sven: Yarn Spinner will choose one of the lines in a Line Group for you.
Sven: It lets you add some variety.
Sven: You can even add conditions to lines in a line group.
Sven: It's pretty great!
===

title: Room7_NodeGroups_1
group: Room7
when: once 
when: !visited("Room7_NodeGroups_1")
---
Dr Node: Hi, I'm Doctor Node.
Dr Node: I'm here to show you how Node Groups work.
Dr Node: Node Groups let you create a collection of Nodes that share the same name.
Dr Node: Each Node that's part of the group has a "when" condition in its header... and that when condition dictates when it's shown.
Dr Node: You're seeing these lines because this node in the Node Group has its when condition set to once.
Dr Node: Which means you'll see it once.
Dr Node: Try speaking to me again.
===

title: Room7_NodeGroups_1
group: Room7
when: !$player_can_afford_bribe
---
Dr Node: Hi. You're seeing this because this node has a when condition that evaluates to true if you cannot afford a bribe.
Dr Node: Neat, right?
===

title: Room7_NodeGroups_1
group: Room7
when: $player_meal == .None
---
Dr Node: Hi. 
Dr Node: You havne't got a meal. Alas.
Dr Node: I know this because of my when clause, thanks Node Groups!
===

title: Room7_NodeGroups_1
group: Room7
when: $player_meal == .Ramen
---
Dr Node: Hi. 
Dr Node: You have RAMEN! How exciting.
Dr Node: I know this because of my when clause, thanks Node Groups!
===

title: Room7_NodeGroups_1
group: Room7
when: always
---
Dr Node: Hi. This node in the node group has its when clause set to always.
Dr Node: So it's kind of like a fallback.
===